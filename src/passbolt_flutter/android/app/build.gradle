def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    ext {
        APP_NAME = "@string/app_name"
        APP_NAME_QA = "@string/app_name_qa"
        APP_NAME_DEV = "@string/app_name_dev"
    }

    compileSdkVersion 29

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.actonica.pb"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        release {
            storeFile file("release.keystore")
            storePassword "android"
            keyAlias "androidreleasekey"
            keyPassword "android"
        }
    }

    flavorDimensions "flavor-type"

    productFlavors {
        dev {
            dimension "flavor-type"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [appName: APP_NAME_DEV, enableCrashReporting:"false"]
            signingConfig signingConfigs.debug
        }
        qa {
            dimension "flavor-type"
            applicationIdSuffix ".qa"
            manifestPlaceholders = [appName: APP_NAME_QA, enableCrashReporting:"true"]
            signingConfig signingConfigs.debug
        }
        prod {
            dimension "flavor-type"
            manifestPlaceholders = [appName: APP_NAME, enableCrashReporting:"true"]
            signingConfig signingConfigs.release
        }
    }

    packagingOptions {
        exclude 'META-INF/**'
        exclude '/*.properties'
        exclude 'fabric/**'
        exclude 'kotlin/**'
        exclude 'org/spongycastle/x509/*.properties'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.12'
    implementation 'com.google.firebase:firebase-analytics:17.2.1'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

apply plugin: 'com.google.gms.google-services'
